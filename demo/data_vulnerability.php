<?php

/*
 * Copyright (C) 2015 FormHandler
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 * @author Marien den Besten
 */

include '../src/Loader.php';

use \FormHandler\FormHandler;
use \FormHandler\Field as Field;
use \FormHandler\Button as Button;

\FormHandler\Configuration::set('fhtml_dir', '../src/FHTML/');

//create a new FormHandler object
$form = new FormHandler();
$form->addHTML('<style>label{display:block;font-weight:bold;color: #777}</style>');

$script = '<script>alert("This should not be displayed\n\n")</script>';
Field\Text::set($form, 'This field should show a script ('.Field\Utils::html($script).')', 'script_code')
    ->setValue('There is a script in this value. //startscript'.$script.'//endscript')
    ->setViewMode();

$form->addHTML('<br>');

//some fields.. (see manual for examples)
$txt = \FormHandler\Utils::html('This message contains a <span style="color:red;">script <script>alert(1)</script></span>');
$form->addLine('Copy this text to the field:<br>'.$txt.'<br><br>');
Field\TextArea::set($form, 'Name', 'name')
    ->setRequired(true)
    ->setValue('');

$form->addHTML('<br>');

$form->addLine('The following linked element should show the encoded value:<br>');
$form->addHTML('<div style="border: 1px solid #000;width: 500px;height:50px;display:block;" id="cont">&nbsp;</div><br>');

$form->link('name', '#cont', function($value)
{
    return FormHandler::returnDynamicOther($value);
});

//button for submitting
Button\Submit::set($form, 'Send');

//set the 'commit-after-form' function
$form->onCorrect(function($data)
{
    return "<strong>Raw post data</strong><br> ". $_POST['name'] .
        '<br><br><strong>FormHandler post data</strong><br>'. $data['name'] .
        '<br><br><strong>When HTML code needs to be kept, use <u>html_entity_decode($data[\'name\'], '
        . 'ENT_COMPAT | ENT_IGNORE, \'UTF-8\')</u> on implementation level</strong><br>'
        . html_entity_decode($data['name'], ENT_COMPAT | ENT_IGNORE, 'UTF-8');
});

//process all form results, needs to be done before any output has been done
$form_html = $form->flush();

//below is code to show the form

echo 'FormHandler data vulnerability protection demo<br>This demo shows how FormHandler handles potentionally malicious code<hr>';
echo $form_html;
