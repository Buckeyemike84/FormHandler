<?php

namespace FormHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-28 at 11:07:30.
 */
class LanguageTest extends \PHPUnit_Framework_TestCase
{
    /**
     */
    protected function setUp()
    {
        include __DIR__ . '/../../src/loader.php';
        Language::reset();
    }

    /**
     */
    protected function tearDown()
    {

    }

    /**
     * @covers FormHandler\Language::exists
     */
    public function testExists()
    {
        //test some falsy names
        $this->assertFalse(Language::exists('en.'));
        $this->assertFalse(Language::exists('en/'));
        $this->assertFalse(Language::exists('en\\'));
        $this->assertFalse(Language::exists('ladsjfp'));

        //test for existing language
        $this->assertTrue(Language::exists('en'));
    }

    /**
     * @covers FormHandler\Language::active
     */
    public function testActive()
    {
        //nothing loaded
        $this->assertNull(Language::active());

        //load language
        Language::load('en');

        //Language should be loaded
        $this->assertEquals('en', Language::active());
    }

    /**
     * @covers FormHandler\Language::load
     */
    public function testLoad()
    {
        //load non existing language
        $this->assertFalse(Language::load('1234'));

        //load existing language
        $this->assertTrue(Language::load('en'));

        //language should be loaded
        $this->assertEquals('en', Language::active());
        $this->assertNotEmpty(Language::get(1));
    }

    /**
     * @covers FormHandler\Language::detect
     */
    public function testDetect()
    {
        //test detect function
        $this->assertEquals('en', Language::detect('en,en-US,en-AU;q=0.8,fr;q=0.6,en-GB;q=0.4'));
        $this->assertEquals('zh', Language::detect('zh-TW,en-US;q=0.7,en;q=0.3'));
        $this->assertEquals('nl', Language::detect('nl,zh-TW,en-US;q=0.7,en;q=0.3'));
        $this->assertNull(Language::detect(''));
    }

    /**
     * @covers FormHandler\Language::set
     */
    public function testSet()
    {
        //set an override on an empty object
        Language::set(1, 'override');

        //check if it comes back
        $this->assertEquals('override', Language::get(1));

        //load language
        Language::load('en');

        //check if override still exists
        $this->assertEquals('override', Language::get(1));
    }

    /**
     * @covers FormHandler\Language::remove
     */
    public function testRemove()
    {
        //When nothing loaded, there is nothing to remove
        $this->assertFalse(Language::remove(1));

        //preload a language
        Language::load('en');

        //get current value
        $original = Language::get(1);

        //override language
        Language::set(1, 'test');

        //override should be active
        $this->assertEquals('test', Language::get(1));

        //remove override
        $result = Language::remove(1);

        //should be back to original
        $this->assertTrue($result);
        $this->assertEquals($original, Language::get(1));

        //removing again should give false
        $this->assertFalse(Language::remove(1));

        //and language should be default
        $this->assertEquals($original, Language::get(1));
    }

    /**
     * @covers FormHandler\Language::get
     */
    public function testGet()
    {
        //check when nothing is loaded it is empty
        $this->assertEquals('', Language::get(1));

        //load language
        Language::load('en');

        //check if a result comes back
        $this->assertNotEmpty(Language::get(1));

        //set an override
        Language::set(1, 'test');

        //check
        $this->assertEquals('test', Language::get(1));
    }

    /**
     * @covers FormHandler\Language::reset
     */
    public function testReset()
    {
        //check when nothing is loaded it is empty
        $this->assertEmpty(Language::get(1));

        //load language
        Language::load('en');

        //check if a result comes back
        $this->assertNotEmpty(Language::get(1));

        //reset language
        Language::reset();

        //check
        $this->assertEmpty(Language::get(1));
        $this->assertNull(Language::active());
    }
}
